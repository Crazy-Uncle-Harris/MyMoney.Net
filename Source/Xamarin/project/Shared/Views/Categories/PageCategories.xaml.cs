using System;using System.Linq;using Xamarin.Forms;using Xamarin.Forms.Xaml;using XMoney.ViewModels;namespace XMoney.Views{    [XamlCompilation(XamlCompilationOptions.Compile)]    public partial class PageCategories : Page    {        private const string textAllLevels = "All levels";        private const string textTopLevels = "Top levels";        private readonly ToolbarItem toolbarItemOnTheRight = new() { Text = textAllLevels };        private enum SortBy        {            Name,            Type,            Count,            Balance        }        private SortBy _sortedBy = SortBy.Name;        private bool _sortDirectionAcending = true;        public PageCategories()        {            InitializeComponent();            toolbarItemOnTheRight.Clicked += this.OnToolbarToggleClicked;            this.ToolbarItems.Add(toolbarItemOnTheRight);            this.AddToolBarButtonSetting();            this.AddSearchBar(this.TheGrid);            SetupHeader();        }        private void IsWorking(bool isWorking)        {            if (this.WorkingSpinner.IsRunning != isWorking)            {                this.WorkingSpinner.IsRunning = isWorking;                this.WorkingSpinner.IsVisible = isWorking;            }        }        public override void OnSearchBarTextChanged()        {            this.LoadList();        }        private void LoadList()        {            this.IsWorking(true);            this.MyListView.ItemsSource = null;            this.ApplySorting();            this.IsWorking(false);        }        protected override void OnAppearing()        {            base.OnAppearing();            if (!seenOnce)            {                LoadList();                seenOnce = true;            }        }        private void ApplySorting()        {            this.columBarTop.SelectedByAutomationId((int)_sortedBy);            var listToSort = toolbarItemOnTheRight.Text == textAllLevels ? Categories._cache : Categories._cacheTop;            if (!string.IsNullOrEmpty(this.filterText))            {                listToSort = listToSort.Where(category =>                    {                        if (category.Name == null)                        {                            return false;                        }                        return category.Name.IndexOf(this.filterText, 0, StringComparison.CurrentCultureIgnoreCase) != -1;                    }                ).ToList();            }            switch (_sortedBy)            {                case SortBy.Name:                    MyListView.ItemsSource = _sortDirectionAcending                        ? listToSort.OrderBy(item => item.Name).ToList()                        : listToSort.OrderByDescending(item => item.Name).ToList();                    break;                case SortBy.Type:                    MyListView.ItemsSource = _sortDirectionAcending                        ? listToSort.OrderBy(item => item.Type).ToList()                        : listToSort.OrderByDescending(item => item.Type).ToList();                    break;                case SortBy.Count:                    MyListView.ItemsSource = _sortDirectionAcending                        ? listToSort.OrderBy(item => item.Quantity).ToList()                        : listToSort.OrderByDescending(item => item.Quantity).ToList();                    break;                case SortBy.Balance:                    MyListView.ItemsSource = _sortDirectionAcending                        ? listToSort.OrderBy(item => item.Amount).ToList()                        : listToSort.OrderByDescending(item => item.Amount).ToList();                    break;                default:                    break;            }        }        private void SetupHeader()        {
            // Category Name
            {                var button = this.columBarTop.AddButton("Name", 35, (int)SortBy.Name);                button.Clicked += (sender, e) =>                {                    if (this._sortedBy == SortBy.Name)                    {
                        // already sorting by this field, so change the ordering
                        this._sortDirectionAcending = !this._sortDirectionAcending;                    }                    else                    {                        this._sortedBy = SortBy.Name;                    }                    ApplySorting();                };            }

            // Type
            {                var button = this.columBarTop.AddButton("Type", 20, (int)SortBy.Type);                button.Clicked += (sender, e) =>                {                    if (this._sortedBy == SortBy.Type)                    {
                        // already sorting by this field, so change the ordering
                        this._sortDirectionAcending = !this._sortDirectionAcending;                    }                    else                    {                        this._sortedBy = SortBy.Type;                    }                    ApplySorting();                };            }


            // Transaction Count
            {                var button = this.columBarTop.AddButton("Transactions", "#", 20, (int)SortBy.Count);                button.Clicked += (sender, e) =>                {                    if (this._sortedBy == SortBy.Count)                    {
                        // already sorting by this field, so change the ordering
                        this._sortDirectionAcending = !this._sortDirectionAcending;                    }                    else                    {                        this._sortedBy = SortBy.Count;                    }                    ApplySorting();                };            }


            // Balance
            {                var button = this.columBarTop.AddButton("Balance", 25, (int)SortBy.Balance);                button.Clicked += (sender, e) =>                {                    if (this._sortedBy == SortBy.Balance)                    {
                        // already sorting by this field, so change the ordering
                        this._sortDirectionAcending = !this._sortDirectionAcending;                    }                    else                    {                        this._sortedBy = SortBy.Balance;                    }                    ApplySorting();                };            }        }        private async void OnItemTapped(object sender, ItemTappedEventArgs e)        {            if (e.Item == null)            {                return;            }            //Deselect Item            ((ListView)sender).SelectedItem = null;            Categories catagory = (Categories)e.Item;            if (catagory != null)            {                var filter = new Filter();                filter.CategoryIds.Clear();                catagory.GetDecendentIds(filter.CategoryIds);                await Navigation.PushAsync(new PageTransactions(filter));            }        }        private void OnToolbarToggleClicked(object sender, EventArgs e)        {            if (toolbarItemOnTheRight.Text == textAllLevels)            {                toolbarItemOnTheRight.Text = textTopLevels;            }            else            {                toolbarItemOnTheRight.Text = textAllLevels;            }            this.LoadList();        }    }}